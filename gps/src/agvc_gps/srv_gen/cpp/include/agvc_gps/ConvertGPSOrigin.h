/* Auto-generated by genmsg_cpp for file /home/ros/owr/git/owr_software/gps/src/agvc_gps/srv/ConvertGPSOrigin.srv */
#ifndef AGVC_GPS_SERVICE_CONVERTGPSORIGIN_H
#define AGVC_GPS_SERVICE_CONVERTGPSORIGIN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "nav_msgs/Odometry.h"


#include "nav_msgs/Odometry.h"

namespace agvc_gps
{
template <class ContainerAllocator>
struct ConvertGPSOriginRequest_ {
  typedef ConvertGPSOriginRequest_<ContainerAllocator> Type;

  ConvertGPSOriginRequest_()
  : gps_global()
  {
  }

  ConvertGPSOriginRequest_(const ContainerAllocator& _alloc)
  : gps_global(_alloc)
  {
  }

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _gps_global_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  gps_global;


  typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConvertGPSOriginRequest
typedef  ::agvc_gps::ConvertGPSOriginRequest_<std::allocator<void> > ConvertGPSOriginRequest;

typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginRequest> ConvertGPSOriginRequestPtr;
typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginRequest const> ConvertGPSOriginRequestConstPtr;



template <class ContainerAllocator>
struct ConvertGPSOriginResponse_ {
  typedef ConvertGPSOriginResponse_<ContainerAllocator> Type;

  ConvertGPSOriginResponse_()
  : gps_local()
  {
  }

  ConvertGPSOriginResponse_(const ContainerAllocator& _alloc)
  : gps_local(_alloc)
  {
  }

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _gps_local_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  gps_local;


  typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConvertGPSOriginResponse
typedef  ::agvc_gps::ConvertGPSOriginResponse_<std::allocator<void> > ConvertGPSOriginResponse;

typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginResponse> ConvertGPSOriginResponsePtr;
typedef boost::shared_ptr< ::agvc_gps::ConvertGPSOriginResponse const> ConvertGPSOriginResponseConstPtr;


struct ConvertGPSOrigin
{

typedef ConvertGPSOriginRequest Request;
typedef ConvertGPSOriginResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ConvertGPSOrigin
} // namespace agvc_gps

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf57bce69c1bcec99f1cf1de90e3fbc7";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcf57bce69c1bcec9ULL;
  static const uint64_t static_value2 = 0x9f1cf1de90e3fbc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "agvc_gps/ConvertGPSOriginRequest";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
nav_msgs/Odometry gps_global\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2042545c1dd7b502071c6aa6c6444bb9";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2042545c1dd7b502ULL;
  static const uint64_t static_value2 = 0x071c6aa6c6444bb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "agvc_gps/ConvertGPSOriginResponse";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nav_msgs/Odometry gps_local\n\
\n\
\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gps_global);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConvertGPSOriginRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gps_local);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConvertGPSOriginResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<agvc_gps::ConvertGPSOrigin> {
  static const char* value() 
  {
    return "ecd21f5fc40d2acf04caba644024bc82";
  }

  static const char* value(const agvc_gps::ConvertGPSOrigin&) { return value(); } 
};

template<>
struct DataType<agvc_gps::ConvertGPSOrigin> {
  static const char* value() 
  {
    return "agvc_gps/ConvertGPSOrigin";
  }

  static const char* value(const agvc_gps::ConvertGPSOrigin&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ecd21f5fc40d2acf04caba644024bc82";
  }

  static const char* value(const agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "agvc_gps/ConvertGPSOrigin";
  }

  static const char* value(const agvc_gps::ConvertGPSOriginRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ecd21f5fc40d2acf04caba644024bc82";
  }

  static const char* value(const agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "agvc_gps/ConvertGPSOrigin";
  }

  static const char* value(const agvc_gps::ConvertGPSOriginResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AGVC_GPS_SERVICE_CONVERTGPSORIGIN_H

